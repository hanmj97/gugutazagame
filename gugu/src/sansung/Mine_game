package DB_project;


import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public class Mine_game extends JFrame implements ActionListener, KeyListener, ListSelectionListener {

   private JTextField textField_1;
   private JButton gamestart;
   Connection conn = null;
   Statement st = null;
   ResultSet rs = null;
   private String[] work = new String[5000];
   private String[] game_LV = { "level 1", "level 2", "level 3", "level 4", "level 5" };
   private JPanel panel_Screen;
   private JLabel label[] = new JLabel[10000];
   private JLabel land[][] = new JLabel[10][10];
   private JLabel score;
   private int scorenum = 0;
   private int i = 0;
   private JList list;
   private int spd = 60;
   private JPanel panel_life1;
   private JPanel panel_life2;
   private JPanel panel_life3;
   private int life = 0;
   private JLabel level;
   private JPanel panel_over;
   private JLabel lblNewLabel;
   private JLabel lblScore;
   private JLabel Label_nickname;
   private JLabel lblNick;
   private String NickName;
   private JButton gotoMain; 
   
   private int returned = 1;
   
   int aaa =1;
   String url = "jdbc:mysql://125.190.205.205:3306/jsp";
   String id="root";
   String pw="1234";
   
   int flag = 0;
   boolean chk = false;
   
   public void init( ){
	   scorenum = 0;
	   i = 0;
	   spd = 1000;
	   life = 0;	
	   flag=0;
	   clear_block();
   }
   
   public Mine_game(String Nick) {
      NickName = Nick;// 닉네임 변수 저장
      

      // 화면구성
      setSize(1280, 720);
      setDefaultCloseOperation(EXIT_ON_CLOSE);
      getContentPane().setLayout(null);   

      textField_1 = new JTextField();// 단어입력칸
      textField_1.setBounds(115, 631, 267, 38);  // 좌표 
      getContentPane().add(textField_1);
      textField_1.setColumns(10); // 10글자 까지

      list = new JList(game_LV); // 레벨 리스트 보여주기
      list.setSelectedIndex(0); 
      list.setFont(new Font("굴림", Font.BOLD, 22));
      list.setBounds(986, 44, 162, 280);
      getContentPane().add(list);

      gamestart = new JButton("시작"); // 시작 버튼
      gamestart.setFont(new Font("굴림", Font.BOLD, 23));
      gamestart.setBounds(489, 626, 105, 38);
      getContentPane().add(gamestart);
      
      
      gotoMain = new JButton("메인으로.."); // 시작 버튼
      gotoMain.setFont(new Font("굴림", Font.BOLD, 23));
      gotoMain.setBounds(603, 626, 180, 38);
      getContentPane().add(gotoMain);
      

      panel_Screen = new JPanel();// 게임화면
      
      
      panel_Screen.setBackground(Color.CYAN);
      panel_Screen.setBounds(43, 29, 740, 571);
      getContentPane().add(panel_Screen);
      panel_Screen.setLayout(null);
      panel_Screen.setVisible(true);

      JPanel panel_1 = new JPanel();    // 게임화면에서 빨간색 선
      panel_1.setBackground(Color.RED);
      panel_1.setBounds(0, 520, 740, 10);
      panel_Screen.add(panel_1);

      score = new JLabel("0점");   // 점수판
      score.setHorizontalAlignment(SwingConstants.CENTER);
      score.setFont(new Font("굴림", Font.BOLD, 50));
      score.setBounds(823, 241, 149, 45);
      getContentPane().add(score);

      Label_nickname = new JLabel(Nick); //닉네임 
      Label_nickname.setHorizontalAlignment(SwingConstants.CENTER);
      Label_nickname.setFont(new Font("굴림", Font.BOLD, 25));
      Label_nickname.setBounds(823, 71, 149, 27);
      getContentPane().add(Label_nickname);

      level = new JLabel("level 1"); //레벨 리스트
      level.setHorizontalAlignment(SwingConstants.CENTER);
      level.setFont(new Font("굴림", Font.BOLD, 24));
      level.setBounds(846, 142, 99, 42);
      getContentPane().add(level);

      panel_life1 = new JPanel(); // 생명1
      panel_life1.setBackground(Color.RED);
      panel_life1.setBounds(824, 319, 26, 27);
      getContentPane().add(panel_life1);

      panel_life2 = new JPanel();// 생명2
      panel_life2.setBackground(Color.RED);
      panel_life2.setBounds(864, 319, 26, 27);
      getContentPane().add(panel_life2);

      panel_life3 = new JPanel(); // 생명3
      panel_life3.setBackground(Color.RED);
      panel_life3.setBounds(904, 319, 26, 27);
      getContentPane().add(panel_life3);

      // 게임결과화면
      panel_over = new JPanel();// 게임결과 백스라운드 
      panel_over.setBackground(Color.PINK);
      panel_over.setBounds(14, 142, 794, 286);
      panel_over.setVisible(false);
      getContentPane().add(panel_over);
      panel_over.setLayout(null);

      lblNewLabel = new JLabel("Game Over"); // 게임 오버 라벨 
      lblNewLabel.setBounds(0, 36, 794, 63);
      panel_over.add(lblNewLabel);
      lblNewLabel.setForeground(Color.RED);
      lblNewLabel.setFont(new Font("굴림", Font.BOLD, 54));
      lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);

      lblNick = new JLabel("Nick");// 닉네임 
      lblNick.setBounds(0, 115, 794, 45);
      panel_over.add(lblNick);
      lblNick.setHorizontalAlignment(SwingConstants.CENTER);
      lblNick.setForeground(Color.RED);
      lblNick.setFont(new Font("굴림", Font.BOLD, 54));

      lblScore = new JLabel(); // 게임결과 점수 
      lblScore.setBounds(0, 232, 794, 42);
      panel_over.add(lblScore);
      lblScore.setHorizontalAlignment(SwingConstants.CENTER);
      lblScore.setForeground(Color.RED);
      lblScore.setFont(new Font("굴림", Font.BOLD, 54));


      setVisible(true);

      // 버튼,리스트,키 이벤트설정및 텍스트필드포커스 설정
      gamestart.addActionListener( this ); // 버튼 이벤트
      gotoMain.addActionListener( this ); // 버튼 이벤트
      textField_1.addKeyListener(this); // 키 이벤트
      list.addListSelectionListener(this); // 리스트 이벤트
      textField_1.requestFocus(); // 텍스트 포커스
      
      
      
      

   }
   
   @Override
   public void actionPerformed(ActionEvent e) {

      // 게임시작 버튼 이벤트
      if (e.getSource().equals(gamestart)) {
    	  System.out.println("actionPerformed = gamestart ");
    	  init();
         // 라이프 0 = 생명이 모두 있는것
         life = 0;
         score.setText("0점"); // 게임시작시 점수판 0점
         scorenum = 0; // 게임점수 변수 =0
         // 만약에 게임결과화면이 띄어져 있으면 보이지 않게
         if (panel_over.isVisible()) {
            panel_over.setVisible(false);// 결과화면 안보이게
         }
         
         try {
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection(url, id, pw);
            st = conn.createStatement(); 
            rs = st.executeQuery("SELECT word FROM wordtbl");
                
            int cnt =0;
              while (rs.next()) {	
            	  	//기존의 DB값 넣기
            	String aword = rs.getString("word");
                 work[cnt] = aword;
                 System.out.println("단어 : " + aword);
                 cnt++;                 
               }
              
              
              

         } catch(Exception e1){
              System.out.println(e1.getMessage());
         }

               
         // 단어가 만들어져 있는지 확인F
         if (label[0] != null) {
            for (int i = 0; i < label.length; i++) {
               // 쓰레드가 돌아가고 있으면 중지
               if (!new Sansung_Thread().isAlive() || !new Sansung_move().isAlive()) {
                  new Sansung_Thread().interrupt();// 단어 쓰레드 중지
                  new Sansung_move().interrupt();// 내려가는 쓰레드 중지
               }
               // 단어가 만들어져 있다면 안보이게
               if (label[i] != null) {
                  label[i].setVisible(false);
               }

            }
         }

         // 게임시작시 텍스트필드 포커스 주기
         textField_1.requestFocus();
         // 단어를 뿌려주는 쓰레드 실행

         new Sansung_Thread().start();

      }
   }
   
   
   public static int randomRange(int n1, int n2) {	//랜덤 범위
	    return (int) (Math.random() * (n2 - n1 + 1)) + n1;
   }
   
   public void create_block(){	// 생성 함수
	   int lev = list.getSelectedIndex();
       int max_col = lev>=4?6:3;
       for(int i=0 ; max_col>i ; i++){
    	   
    	   for(int j=0 ; 8 > j ; j++){
    		   
    		   System.out.println("random.nextInt(work.length) : "+ work[ randomRange(1 , 2000) ]);
    		   land[i][j] = new JLabel( work[ randomRange(1 , 2000) ] );// 단어
    		   
    		   land[i][j].setBounds(1+(j*80), 1+(i*20), 80, 15);// 단어 초기 위치 높이,폭 설정
    		   
    		   land[i][j].setLocation(-00 +(j*60), -00 +(i*20));
    		   panel_Screen.add(land[i][j]);
    	   }    	   
       }
   }
   
   public void clear_block(){	// 생성 함수
	   panel_Screen.setVisible(false);
	   panel_Screen.removeAll();
	   panel_Screen.setVisible(true);
	   JPanel panel_1 = new JPanel();    // 게임화면에서 빨간색 선
      panel_1.setBackground(Color.RED);
      panel_1.setBounds(0, 520, 740, 10);
      panel_Screen.add(panel_1);

   }   
   
 
   
   
   public void move_block() throws Exception{	// 이동 함수
	   
	   int lev = list.getSelectedIndex();
       int max_col = lev>=4?6:3;       
       int yyy = returned >= 1?1:10000;       
       for(int i=0 ; max_col>i ; i++){    	   
    	   for(int j=0 ; 8 > j ; j++){
    		   if (land[i][j].isVisible()) {
    	              int sp = land[i][j].getY();
    	              int xp = land[i][j].getX();
    	              if(returned>=1){
    	            	  yyy = Math.max(yyy, xp);
    	              }else if(returned <= -1){
    	            	  yyy = Math.min(yyy, xp);
    	              }
    		   }
    	   }
    	   
    	   for(int j=0 ; 8 > j ; j++){
    		   int y = land[i][j].getY();
	           int x = land[i][j].getX();
	           
    		   if(yyy>= 650 && returned >=1){
				  land[i][j].setLocation( x-50 , y+20);	//가로 , 세로
				  aaa = -1;
    		   }else if(yyy <= 100 && returned <=-1){
					land[i][j].setLocation( x+50 , y+20);	//가로 , 세로
					aaa = 1;
	           }else{
	           	  land[i][j].setLocation( x +(50*returned), y);	//가로 , 세로
	           }
    		   
    		   if (land[i][j].isVisible() && land[i][j].getY() > 512 && land[i][j].getText() != null ) {
    			   land[i][j].setVisible(false);// 단어가 선을 넘으면 단어 사라짐
	           		life ++;
	           }
    	   }
    	   
       }
       returned = aaa;       
   }
   
   
   public void word_check(String str){
	   textField_1.setText("");// 텍스트 값 없애기
	   int lev = list.getSelectedIndex();
       int max_col = lev>=4?6:3;
       for(int i=0 ; max_col>i ; i++){    	   
    	   for(int j=0 ; 8 > j ; j++){
    		   
    		   if( str.equals(land[i][j].getText() ) && land[i][j].isVisible() ){
    			   scorenum = scorenum += 10; // 점수 +5
                   score.setText(scorenum + "점"); // 점수판 점수 변경
                   land[i][j].setVisible(false);// 단어 화면에서 안보이게
                   textField_1.setText("");// 텍스트 값 없애기
                   
                   if(scorenum > 200 &&  list.getSelectedIndex() != 4 ){      // 초기화하고 다음 단계 넘어가기                    	
	                   	scorenum = 0;
	                   	score.setText(scorenum + "점");
	                   	list.setSelectedIndex(list.getSelectedIndex()+1);
	                   	if( list.getSelectedIndex() <= 4 ){
	                   		clear_block();
		                   	create_block();
	                   	}

                   }                   
    		   }    		   
    	   }
       }
	   
   }
   
   

   // 단어를 입력하여 동일단어 있는지 확인하는 키이벤트
   @Override
   public void keyPressed(KeyEvent e) {
	   System.out.println("키 이벤트 실행 확인 ");

      // 엔터키 이벤트
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
         // 텍스트 필드에 값이 있는지 없는지 확인
         if (!textField_1.getText().equals("")) {
            // String 변수에 텍스트 값 주기
            String work_answer = textField_1.getText().toString();
            word_check(work_answer);

         }

      }

   }
   @Override
   public void keyReleased(KeyEvent e) {
      // TODO Auto-generated method stub
   }
   @Override
   public void keyTyped(KeyEvent e) {
      // TODO Auto-generated method stub
   }

   // 단어를 하나씩 뿌려주는 쓰레드
   class Sansung_Thread extends Thread {

      @Override
      public void run() {
         panel_Screen.setVisible(true);// 게임화면 등장
         
         int lev = list.getSelectedIndex();
         int max_col = lev==4?4:2;
         create_block();
         // 단어를 레벨에 따른 속도로 게임화면에 x값 랜덤으로생성
         for (int i = 0; 10000 > i; i++) {

            try {       
                      
           
               new Sansung_move().start();
             
               if( life >= 3){
            	   this.interrupt();
            	   this.stop();
               }else{
            	   Thread.sleep(spd);// 게임레벨에 따른 단어속도
               }
               
              
            } catch (InterruptedException e) {
               // TODO Auto-generated catch block
               e.printStackTrace();
               Thread.interrupted();
               
            }

         }

      }
   }

   // 단어 내려가고,게임오버 확인하는 쓰레드
   class Sansung_move extends Thread {
      @Override
      public void run() {
    	 
    	  try {
			move_block();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        // 라이프 확인
         if(life == 0){// 생명 모두 있음
             panel_life1.setBackground(Color.RED);
             panel_life2.setBackground(Color.RED);
             panel_life3.setBackground(Color.RED);
         } else if( life == 1){ // 생명 1개 없어짐
             panel_life1.setBackground(Color.BLUE);
             panel_life2.setBackground(Color.RED);
             panel_life3.setBackground(Color.RED);
         } else if( life == 2 ){// 생명 2 없어짐
        	 panel_life1.setBackground(Color.BLUE);
             panel_life2.setBackground(Color.BLUE);
             panel_life3.setBackground(Color.RED); 
         }else { // 생명 3개 없어짐 게임오버
        	 
             panel_life1.setBackground(Color.BLUE);
             panel_life2.setBackground(Color.BLUE);
             panel_life3.setBackground(Color.BLUE);
             // 게임 결과화면 띄우기            

             
             if( scorenum >200 && list.getSelectedIndex() == 4 && flag == 0 ){	//점수가 200 이상일때 결과 출력
            	 flag++;
                 panel_Screen.setVisible(false);
                 panel_over.setVisible(true);
                 lblScore.setText("score : "+score.getText());
                 lblNick.setText(NickName);
                 System.out.println(NickName+" :  "+ score.getText());
                
                 
                 gamescore(NickName ,score.getText() );	//게임 점수 저장 부분
                 this.stop();
                 this.interrupt();
                 
             }else{	//그 이하일때 그냥 게임끝
             	panel_Screen.setVisible(false);
                 panel_over.setVisible(true);
                 lblNick.setText(NickName);
             }      
             
             this.interrupt();
             this.stop();
         }         
         
         
      }
   }

   public void gamescore(String name , String score){	// 게임 점수 저장 함수
	   
       try {
           Class.forName("com.mysql.jdbc.Driver");
           conn = DriverManager.getConnection(url, id, pw);
           st = conn.createStatement(); 
           String sql = "insert into alter_user2( user, score )values('"+name+"',"+score.replaceAll("점", "")+")";
           st.executeUpdate(sql);        		   
           
       }catch( Exception e){
    	   e.printStackTrace();
       }
	   
   }
   


   // 레벨리스트 이벤트 처리
   @Override
   public void valueChanged(ListSelectionEvent arg0) {
      // TODO Auto-generated method stub
      String str;
      if (arg0.getSource() == list) {

         switch (list.getSelectedIndex()) {
         case 0:
            spd = 1000;// 게임속도
            str = (String) list.getSelectedValue();// 리스트 이름 저장
            level.setText(str); // 레벨 라벨에 보여주기
            break;
         case 1:
            spd = 800;// 게임속도
            str = (String) list.getSelectedValue();// 리스트 이름 저장
            level.setText(str);// 레벨 라벨에 보여주기
            break;
         case 2:
            spd = 600;// 게임속도
            str = (String) list.getSelectedValue();// 리스트 이름 저장
            level.setText(str);// 레벨 라벨에 보여주기
            break;
         case 3:
            spd = 500;// 게임속도
            str = (String) list.getSelectedValue();// 리스트 이름 저장
            level.setText(str);// 레벨 라벨에 보여주기
            break;
         case 4:
            spd = 400;// 게임속도
            str = (String) list.getSelectedValue();// 리스트 이름 저장
            level.setText(str);// 레벨 라벨에 보여주기
            break;
         
         default:
            break;
         }
      }
   }
}
